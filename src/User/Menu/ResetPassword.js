import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { FaLock } from 'react-icons/fa';

function ResetPassword() {
  const { token } = useParams();
  const navigate = useNavigate();

  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const handleReset = async () => {
    setError('');
    setMessage('');

    const trimmedPassword = newPassword.trim();
    const trimmedConfirm = confirmPassword.trim();

    if (!trimmedPassword || !trimmedConfirm) {
      setError('р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Йр╕Др╕гр╕Ъ');
      return;
    }

    if (trimmedPassword.length < 5) {
      setError('р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Хр╣Йр╕нр╕Зр╕бр╕╡р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 5 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г');
      return;
    }

    if (trimmedPassword !== trimmedConfirm) {
      setError('р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Щ');
      return;
    }

    try {
      const res = await fetch('http://localhost:5000/api/reset-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token, newPassword: trimmedPassword }),
      });

      const data = await res.json();
      if (data.success) {
        setMessage(data.message);
        setTimeout(() => navigate('/User/Login'), 2000);
      } else {
        setError(data.message || 'р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕Фр╣Й');
      }
    } catch (err) {
      console.error('Reset error:', err);
      setError('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣И');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white p-8 rounded-xl shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold text-center text-yellow-600 mb-6">
          ЁЯФТ р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И
        </h2>

        {/* р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2 font-medium">р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И</label>
          <div className="relative">
            <input
              type="password"
              placeholder="р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И (р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 5 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г)"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
            />
            <FaLock className="absolute top-3 left-3 text-gray-400" />
          </div>
        </div>

        {/* р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2 font-medium">р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ</label>
          <div className="relative">
            <input
              type="password"
              placeholder="р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400"
            />
            <FaLock className="absolute top-3 left-3 text-gray-400" />
          </div>
        </div>

        {/* р╕Ыр╕╕р╣Ир╕б */}
        <button
          onClick={handleReset}
          className="w-full bg-yellow-500 hover:bg-yellow-600 text-white py-3 rounded-lg font-semibold transition duration-300"
        >
          р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И
        </button>

        {/* р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ */}
        {error && <p className="mt-4 text-red-500 text-sm text-center">{error}</p>}
        {message && <p className="mt-4 text-green-600 text-sm text-center">{message}</p>}

        <button
          onClick={() => navigate('/User/Login')}
          className="mt-4 text-sm text-gray-500 hover:text-yellow-500 transition"
        >
          ЁЯФЩ р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ
        </button>
      </div>
    </div>
  );
}

export default ResetPassword;
